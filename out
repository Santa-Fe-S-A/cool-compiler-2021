.data
p_error: .asciiz "Aborting from String"
zero_error: .asciiz "Division by zero"
range_error: .asciiz "Index out of range"
Object_class_name: .asciiz "Object"
String_class_name: .asciiz "String"
IO_class_name: .asciiz "IO"
Int_class_name: .asciiz "Int"
Bool_class_name: .asciiz "Bool"
Main_class_name: .asciiz "Main"
Object_conforms_to: .word Object_class_name
String_conforms_to: .word String_class_name, Object_class_name
IO_conforms_to: .word IO_class_name, Object_class_name
Int_conforms_to: .word Int_class_name, Object_class_name
Bool_conforms_to: .word Bool_class_name, Object_class_name
Main_conforms_to: .word Main_class_name, IO_class_name, Object_class_name
local_main_at_Main_internal_2: .asciiz "Hello world"
.text
.globl main

            str_len:
                    li $v0,0
                    move $v1, $a0
                __lenLoop:
                    lbu $t1, 0($v1)
                    beq $t1,$0,__lenExit
                    addu $v0,$v0,1
                    addu $v1,$v1,1
                    b __lenLoop
                __lenExit:
                    jr $ra

            str_copy:
                lw $a0, -4($fp)
                lw $a1, -8($fp)
                lw $a2, -12($fp)
                
                move $v0, $a0
                
                str__while_copy:
                beqz $a2, str__end_copy
                
                xor $t0, $t0, $t0
                lb $t0, 0($a1)
                sb $t0, 0($a0)
                
                subu $a2, $a2,1
                addu $a0, $a0,1
                addu $a1, $a1,1
                j str__while_copy
                
                str__end_copy:
                jr $ra
                
                str_index_error:
                    li $v0, 4
                    la $a0, range_error
                    syscall
                    li $v0, 10
                    syscall
                    jr $ra

            str_substring:
                # load arguments
                move $t5, $a0
                move $t3, $a1
                li $t4, 0
                move $t2, $a2

                # check for index out of range
                move $a3, $ra
                jal str_len
                move $ra, $a3

                addu $t6, $t3, $t2
                bgt $t6, $v0, str_index_error

                # create substring
                move $a0, $t2           #length
                addu $a0, $a0, 1
                li $v0, 9       #make space
                syscall
                # tenemos en $v0 la direccion del nuevo string

                addu $t5, $t5, $t3

                subu $sp, $sp, 4
                sw $ra, 0($sp)
                subu $sp, $sp, 4
                sw $fp, 0($sp)
                move $fp,$sp
                subu $sp, $sp, 4
                sw $v0, 0($sp)
                subu $sp, $sp, 4
                sw $t5, 0($sp)
                subu $sp, $sp, 4
                sw $t2, 0($sp)

                jal str_copy
                move $sp,$fp

                lw $fp, 0($sp)
                addi $sp,$sp, 4

                lw $ra, 0($sp)
                addi $sp,$sp, 4

                addu $t9, $v0, $t2          #null terminated
                sb $0, 0($t9)
                jr $ra


                #$a0 el prefijo, y en $a1, el str.
            
            str1_prefix_of_str2:
                lb $t0, 0($a0)
                lb $t1, 0($a1)
                beqz $t0, prefixTrue
                bne	 $t0, $t1, prefixFalse
                addu $a0,$a0,1
                addu $a1,$a1,1
                b str1_prefix_of_str2
                prefixFalse:
                    li $v0, 0
                    jr $ra
                prefixTrue:
                    li $v0, 1
                    jr $ra

            str_comparer:
                move $a0, $a2
                move $a1, $ra
                jal str_len       #$v0=len(message1)
                move $ra, $a1

                move $s1, $v0

                move $a0, $a3

                move $a1, $ra
                jal str_len       #$v0=len(message2)
                move $ra, $a1

                beq $v0, $s1, string_length_comparer_end
                li $v0, 0
                j string_comparer_end

                string_length_comparer_end:
                move $a0, $a2
                move $a1, $a3
                move $s1, $ra
                jal str1_prefix_of_str2
                move $ra, $s1
                string_comparer_end:
                jr $ra

            case_conform:
                move $s0, $a0
                move $s1, $a1
                START_CASE_LOOP:

                    lw $a1, 0($s0)

                    addi $s0, $s0, 4

                    move $t0, $s1	# Address of 1st element in array.
                    li $v0, 4		# System call code 4 (print_string).
                    li $t1, 0		# Initialize array offset.

                loop_INTERNAL:

                    # Use the address mode label(register).

                    lw $a0, 0($t0)	# Load value at address str_array + $t1 (offset).	

                    beq $a0, $a1, END_CASE_LOOP

                    addi $t0, $t0, 4	# Next element, i.e., increment offset by 4.
                    addi $t1, $t1, 4	# Next element, i.e., increment offset by 4.

                    # Done or loop once more?

                    ble $t1, $a2, loop_INTERNAL
                    b START_CASE_LOOP
                END_CASE_LOOP:
                move $v0, $a0
                jr $ra

            str_concat:
                move $a3, $ra
                jal str_len
                move $ra, $a3

                # guardamos en $t4, la longitud de str1
                move $t4, $v0
                # el str1
                move $t5, $a0
                move $a0, $a1
                move $t8, $a1

                move $a3, $ra
                jal str_len
                move $ra, $a3

                # reservamos espacio para el nuevo string
                # guardamos en $t7 la longitud de str2
                move $t7, $v0
                addu $v0, $t4, $v0
                addu $v0, $v0, 1
                move $a0, $v0
                li $v0, 9
                syscall

                # en $t5 esta str1, y en $t8, str2-------------------------

                # save str1 part------------------------------------------
                # push $ra
                subu $sp, $sp, 4
                sw $ra, 0($sp)
                # push $fp
                subu $sp, $sp, 4
                sw $fp, 0($sp)

                move $fp, $sp

                # push dest to copy pointer
                subu $sp, $sp, 4
                sw $v0, 0($sp)

                # push copy from
                subu $sp, $sp, 4
                sw $t5, 0($sp)

                # push how much to copy
                subu $sp, $sp, 4
                sw $t4, 0($sp)

                jal str_copy

                move $sp, $fp

                lw $fp, 0($sp)
                addu $sp, $sp, 4

                lw $ra, 0($sp)
                addu $sp, $sp, 4

                # save str2 part-------------
                # push $ra
                subu $sp, $sp, 4
                sw $ra, 0($sp)

                # push $fp
                subu $sp, $sp, 4
                sw $fp, 0($sp)

                move $fp, $sp

                # push where to copy
                move $t9, $v0
                addu $t0, $v0, $t4
                subu $sp, $sp, 4
                sw $t0, 0($sp)

                # push copy from
                subu $sp, $sp, 4
                sw $t8, 0($sp)

                subu $sp, $sp, 4
                sw $t7, 0($sp)

                jal str_copy

                move $sp, $fp

                lw $fp, 0($sp)
                addu $sp, $sp, 4

                lw $ra, 0($sp)
                addu $sp, $sp, 4

                addu $v0, $t7, $v0
                sb $0, 0($v0)

                move $v0, $t9
                jr $ra
            
main:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 12
# Allocate 
addiu $a0, $zero, 8
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 32
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_in_string_at_IO
sw $a0, 12($s0)
la $a0, function_out_string_at_IO
sw $a0, 16($s0)
la $a0, function_in_int_at_IO
sw $a0, 20($s0)
la $a0, function_out_int_at_IO
sw $a0, 24($s0)
la $a0, function_main_at_Main
sw $a0, 28($s0)
sw $s0, 4($s1)
la $a0, Main_conforms_to
sw $a0, 0($s1)
sw $s1, 0($fp)
# Arg
addi $sp, $sp, -4
lw $t1, 0($fp)
sw $t1, 0($sp)
# Call
jal function_main_at_Main
sw $v0, -4($fp)
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_abort_at_Object:
addi $sp, $sp, -0
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 8
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_copy_at_Object:
addi $sp, $sp, -0
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 8
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_type_name_at_Object:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 16
# TypeOf
lw $s0, 0($fp)
lw $t1, 0($s0)
lw $t2, 0($t1)
sw $t2, -4($fp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 24
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_length_at_String
sw $a0, 12($s0)
la $a0, function_substr_at_String
sw $a0, 16($s0)
la $a0, function_concat_at_String
sw $a0, 20($s0)
sw $s0, 4($s1)
la $a0, String_conforms_to
sw $a0, 0($s1)
sw $s1, -8($fp)
# SetAttrib
lw $s1, -8($fp)
lw $s0, -4($fp)
sw $s0, 8($s1)
# ReturnNode
lw $t0, -8($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_concat_at_String:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 20
# Concat
lw $s0, 0($fp)
lw $a0, 8($s0)
lw $s0, -4($fp)
lw $a1, 8($s0)
jal str_concat
sw $v0, -8($fp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 24
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_length_at_String
sw $a0, 12($s0)
la $a0, function_substr_at_String
sw $a0, 16($s0)
la $a0, function_concat_at_String
sw $a0, 20($s0)
sw $s0, 4($s1)
la $a0, String_conforms_to
sw $a0, 0($s1)
sw $s1, -12($fp)
# SetAttrib
lw $s1, -12($fp)
lw $s0, -8($fp)
sw $s0, 8($s1)
# ReturnNode
lw $t0, -12($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_length_at_String:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 16
# LengthNode
lw $s0, 0($fp)
lw $a0, 8($s0)
jal str_len
sw $v0, -4($fp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
sw $s0, 4($s1)
la $a0, Int_conforms_to
sw $a0, 0($s1)
sw $s1, -8($fp)
# SetAttrib
lw $s1, -8($fp)
lw $s0, -4($fp)
sw $s0, 8($s1)
# ReturnNode
lw $t0, -8($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_substr_at_String:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 24
# Substring
lw $s0, 0($fp)
lw $a0, 8($s0)
lw $s0, -4($fp)
lw $a1, 8($s0)
lw $s0, -8($fp)
lw $a2, 8($s0)
jal str_substring
sw $v0, -12($fp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 24
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_length_at_String
sw $a0, 12($s0)
la $a0, function_substr_at_String
sw $a0, 16($s0)
la $a0, function_concat_at_String
sw $a0, 20($s0)
sw $s0, 4($s1)
la $a0, String_conforms_to
sw $a0, 0($s1)
sw $s1, -16($fp)
# SetAttrib
lw $s1, -16($fp)
lw $s0, -12($fp)
sw $s0, 8($s1)
# ReturnNode
lw $t0, -16($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_out_string_at_IO:
addi $sp, $sp, -0
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 12
## out_string builtin
li $v0, 4
lw $t0, -4($fp)
lw $a0, 8($t0)
syscall
# ReturnNode
lw $t0, 0($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_in_string_at_IO:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 16
## in_string builtin
li $v0, 9
li $a0, 1024
syscall
move $a0, $v0
li $v0, 8
la $a1, 1024
syscall
move $t0, $a0
move $a3, $ra
jal str_len
move $ra, $a3
subu $v0, $v0, 1
addu $v1, $v0, $t0
sb $0, 0($v1)
move $v0, $t0
sw $v0, -4($fp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 24
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_length_at_String
sw $a0, 12($s0)
la $a0, function_substr_at_String
sw $a0, 16($s0)
la $a0, function_concat_at_String
sw $a0, 20($s0)
sw $s0, 4($s1)
la $a0, String_conforms_to
sw $a0, 0($s1)
sw $s1, -8($fp)
# SetAttrib
lw $s1, -8($fp)
lw $s0, -4($fp)
sw $s0, 8($s1)
# ReturnNode
lw $t0, -8($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_out_int_at_IO:
addi $sp, $sp, -0
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 12
## out_int builtin
li $v0, 1
lw $t0, -4($fp)
lw $a0, 8($t0)
syscall
# ReturnNode
lw $t0, 0($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_in_int_at_IO:
addi $sp, $sp, -8
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 16
## out_int builtin
li $v0, 5
syscall
move $t0, $v0
sw $t0, -4($fp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
sw $s0, 4($s1)
la $a0, Int_conforms_to
sw $a0, 0($s1)
sw $s1, -8($fp)
# SetAttrib
lw $s1, -8($fp)
lw $s0, -4($fp)
sw $s0, 8($s1)
# ReturnNode
lw $t0, -8($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_ctor_at_Main:
addi $sp, $sp, -4
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 8
# Allocate 
addiu $a0, $zero, 8
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 32
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_in_string_at_IO
sw $a0, 12($s0)
la $a0, function_out_string_at_IO
sw $a0, 16($s0)
la $a0, function_in_int_at_IO
sw $a0, 20($s0)
la $a0, function_out_int_at_IO
sw $a0, 24($s0)
la $a0, function_main_at_Main
sw $a0, 28($s0)
sw $s0, 4($s1)
la $a0, Main_conforms_to
sw $a0, 0($s1)
sw $s1, 0($fp)
# ReturnNode
lw $t0, 0($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
function_main_at_Main:
addi $sp, $sp, -12
addi $sp, $sp, -8
sw $ra, 4($sp) # save $ra
sw $fp, 0($sp) # save $fp
addi $fp, $sp, 20
# Arg
addi $sp, $sp, -4
lw $t1, 0($fp)
sw $t1, 0($sp)
# Allocate 
addiu $a0, $zero, 12
li $v0, 9
syscall
addu $s1, $zero, $v0
addiu $a0, $zero, 24
li $v0, 9
syscall
addu $s0, $zero, $v0
la $a0, function_abort_at_Object
sw $a0, 0($s0)
la $a0, function_type_name_at_Object
sw $a0, 4($s0)
la $a0, function_copy_at_Object
sw $a0, 8($s0)
la $a0, function_length_at_String
sw $a0, 12($s0)
la $a0, function_substr_at_String
sw $a0, 16($s0)
la $a0, function_concat_at_String
sw $a0, 20($s0)
sw $s0, 4($s1)
la $a0, String_conforms_to
sw $a0, 0($s1)
sw $s1, -12($fp)
# Load
la $t1, local_main_at_Main_internal_2
lw $t2, -12($fp)
sw $t1, 8($t2)
# Arg
addi $sp, $sp, -4
lw $t1, -12($fp)
sw $t1, 0($sp)
# Call
jal function_out_string_at_IO
sw $v0, -8($fp)
# ReturnNode
lw $t0, -8($fp)
move $v0, $t0
lw $ra, 4($sp) # restore $ra
lw $t1, 0($sp)
addi $sp, $fp, 4
move $fp, $t1 # restore $fp
jr $ra
